{"version":3,"sources":["components/fixed/Footer.js","config.js","components/fixed/Navigation.js","components/daydo/DaydoItem.js","components/daydo/DaydoItemList.js","components/daydo/DaydoForm.js","components/daydo/DaydoSlider.js","components/daydo/DaydoListTemplate.js","components/preference/Preference.js","components/PreferenceWrapper.jsx","components/todo/TodoForm.js","components/todo/TodoItem.js","components/todo/TodoItemList.js","components/todo/TodoListTemplate.js","components/TodayWrapper.jsx","App.js","reportWebVitals.js","index.js"],"names":["Footer","className","homepageURL","serverURL","Navigation","userInfo","id","href","target","rel","to","onClick","document","querySelector","classList","toggle","src","pictureUrl","alt","name","cookie","window","location","replace","DaydoItem","content","onRemove","onChange","type","value","e","stopPropagation","DaydoItemList","daydoListHTML","day","daydoList","dayHTML","length","map","DaydoForm","onCreate","onKeyPress","placeholder","DaydoSlider","onSlide","DayDoListTemplate","darkTheme","today","Date","useState","allDaydoItemList","setAllDaydoItemList","daydoItemList","setDaydoItemList","formInput","setFormInput","fetched","setFetched","userIdLocation","split","find","row","startsWith","userId","undefined","getDay","setDay","handleCreate","newDaydoItem","fetch","method","headers","body","JSON","stringify","then","response","json","console","log","useEffect","inputs","querySelectorAll","forEach","input","add","remove","items","defaultDaydoItemList","filter","daydoItem","updatedDaydoItemList","updatedAllDaydoItemList","deletedId","index","findIndex","selectedItem","updatedId","allDayItemListIndex","key","Preference","onToggle","checked","style","color","border","width","marginTop","PreferenceWrapper","handleThemeToggle","fontSize","TodoForm","TodoItem","isDone","htmlFor","TodoItemList","todoListHTML","todoList","TodoListTemplate","todoItemList","setTodoItemList","newTodoItem","updatedTodoItemList","todoItem","TodayWrapper","todayDateHTML","App","getMonth","getDate","setDarkTheme","navigation","footer","isPatched","setIsPatched","setUserInfo","newUserInfo","path","exact","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.99af8ae6.chunk.js","sourcesContent":["import './Footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer className=\"footer\">\r\n            <p>ⓒ 2021 Kevin.P, All rights reserved.</p>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;","export const homepageURL = \"http://www.tasko.link\";\r\nexport const serverURL = \"http://222.109.248.218:10000\";\r\n","import { Link } from 'react-router-dom';\r\nimport './Navigation.css';\r\nimport { homepageURL } from '../../config'\r\n\r\nconst Navigation = ({ userInfo }) => {\r\n    function logout() {\r\n        document.cookie = `userId= ; expires=Thu, 01 Jan 1999 00:00:10 GMT;`;\r\n        window.location.replace(homepageURL);\r\n    }\r\n\r\n    function handleToggle() {\r\n        let dropdown = document.querySelector('.user-info-dropdown');\r\n        dropdown.classList.toggle('show');\r\n    }\r\n\r\n    return (\r\n        <nav className=\"navigation\">\r\n            <ul className=\"navigation-list\">\r\n                <li id=\"logo\"><a href={homepageURL + \"/#/dashboard\"} target=\"_blank\" rel=\"noreferrer\">&pi;</a></li>\r\n                <li><Link to=\"/\">할일</Link></li>\r\n                <li><Link to=\"/preference\">설정</Link></li>\r\n                <li>\r\n                    <div className=\"dropdown\">\r\n                        <div className=\"navigation-user-info\" onClick={handleToggle}>\r\n                            <img className=\"navigation-user_picture\" src={userInfo.pictureUrl} alt={userInfo.name}></img>\r\n                            <span className=\"navigation-user-name\">{userInfo.name}</span>\r\n                        </div>\r\n                        <div className=\"user-info-dropdown\">\r\n                            <p className=\"logout\" onClick={logout}>로그아웃</p>\r\n                        </div>\r\n                    </div>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navigation;","import './DaydoItem.css'\r\n\r\nconst DaydoItem = ({ id, content, onRemove, onChange}) => {\r\n    return (\r\n        <li className=\"daydo-item\">\r\n            <input type=\"text\" className={`todo-content`} value={content} onChange={(e) => { onChange(e, id) }}/>\r\n            <span className=\"remove-item\" onClick={(e) => { e.stopPropagation(); onRemove(id); }}>&times;</span>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default DaydoItem;","import DaydoItem from './DaydoItem';\r\nimport './DaydoItemList.css';\r\n\r\nconst DaydoItemList = ({ day, daydoList, onRemove, onChange }) => {\r\n    let daydoListHTML;\r\n    const dayname = ['일','월','화','수','목','금','토','일'];       \r\n    const dayHTML = dayname[day] + '요일';\r\n\r\n    if(!daydoList) {\r\n        daydoListHTML = <p>로딩중...</p>;\r\n    }\r\n    else if(daydoList.length === 0) {\r\n        daydoListHTML = <div className=\"daydo-empty-list\">{dayHTML}마다 할 일을 설정해주세요!</div>\r\n    }\r\n    else {\r\n        daydoListHTML = daydoList.map(\r\n            ({id, content}) => {\r\n                return <DaydoItem\r\n                    key={id}\r\n                    id={id}\r\n                    content={content}\r\n                    onRemove={onRemove}\r\n                    onChange={onChange}\r\n                />\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ul className=\"todo-list-wrapper\">\r\n            {daydoListHTML}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default DaydoItemList;","import './DaydoForm.css';\r\n\r\nconst DaydoForm = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className=\"daydo-form\">\r\n            <span>+</span>   \r\n            <input type=\"text\" value={value} onChange={onChange} onKeyPress={onKeyPress} placeholder=\"할 일 적기\"/>\r\n            <button onClick={onCreate}>추가</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DaydoForm;","import './DaydoSlider.css'\r\n\r\nconst DaydoSlider = ({ day, onSlide }) => {\r\n    const dayname = ['일','월','화','수','목','금','토','일'];       \r\n    const dayHTML = dayname[day] + '요일';\r\n\r\n    \r\n    return (\r\n        <div className=\"daydo-title\">\r\n            <h2 className=\"left\" onClick={onSlide}>&#60;</h2>\r\n            <h2>{dayHTML}</h2>\r\n            <h2 className=\"right\" onClick={onSlide}>&#62;</h2>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default DaydoSlider;","import { useEffect, useState } from 'react'\r\nimport DaydoItemList from './DaydoItemList'\r\nimport DaydoForm from './DaydoForm'\r\nimport './DaydoListTemplate.css'\r\nimport DaydoSlider from './DaydoSlider'\r\nimport { homepageURL, serverURL } from '../../config'\r\n\r\nconst DayDoListTemplate = ({ darkTheme }) => {\r\n    const today = new Date();\r\n\r\n    const [ allDaydoItemList, setAllDaydoItemList ] = useState([]);\r\n    const [ daydoItemList, setDaydoItemList ] = useState([]);\r\n\r\n    const [ formInput, setFormInput ] = useState('');\r\n    const [ fetched, setFetched ] = useState(false);\r\n    \r\n    const userIdLocation = document.cookie.split('; ').find(row => row.startsWith('userId'));\r\n    const userId = userIdLocation === undefined ? window.location.replace(homepageURL) : userIdLocation.split('=')[1];\r\n    \r\n    // 설정의 요일별 할 일 목록의 세팅되어 있는 요일\r\n    // 기준은 JAVA 요일 시스템을 따름 (그 날의 요일)\r\n    const [ day, setDay ] = useState(today.getDay() === 0 ? 7 : today.getDay()); \r\n\r\n    useEffect(() => { // 다크 모드 \r\n        console.log()\r\n        const inputs = document.querySelectorAll('input');\r\n    \r\n        if(darkTheme) {  \r\n          inputs.forEach(input => input.classList.add('dark'));\r\n        }\r\n        else {\r\n          inputs.forEach(input => input.classList.remove('dark'));\r\n        }\r\n      });\r\n      \r\n    // FETCH - POST\r\n    useEffect(() => {\r\n        // 서버로부터 모든 요일의 Daydo 목록 가져오기\r\n        if(!fetched) {\r\n            fetch(`${serverURL}/api/daydos`, {\r\n                method : 'POST',\r\n                headers : {\r\n                    'content-type' : 'application/json'\r\n                },\r\n                body : JSON.stringify(userId)\r\n            })\r\n            .then((response) => response.json())\r\n            .then((items) => {\r\n                console.log(\"서버로부터 모든 요일별 Daydo 목록 가져옴: \", items);\r\n                setFetched(true);\r\n                setAllDaydoItemList(items);\r\n            });\r\n        }\r\n\r\n                    \r\n        // 초기로 설정되어 있는 요일에 해당하는 요일별 할 일 목록 생성\r\n        // !! Java에서 day = 1 ~ 7 : 월요일 ~ 일요일 | JavaScript에서 day = 0 ~ 6 : 일요일 ~ 토요일\r\n        const defaultDaydoItemList = allDaydoItemList.filter(daydoItem => daydoItem.day === day);\r\n            \r\n        setDaydoItemList(defaultDaydoItemList);\r\n    }, [fetched, allDaydoItemList, day]);\r\n\r\n    // CREATE - POST \r\n    function handleCreate() {\r\n        // Form 안의 내용을 초기화\r\n        setFormInput('');\r\n\r\n        // 서버로 보낼 객체 아이템 생성\r\n        const newDaydoItem = {\r\n            userId: userId,\r\n            content: formInput,\r\n            day: day\r\n        };\r\n        \r\n        // POST 방식으로 서버 전송\r\n        fetch(`${serverURL}/api/daydo`, {\r\n            method : 'POST',\r\n            headers: {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(newDaydoItem)\r\n        }) // 서버에서 받은 응답을 객체화 후, DaydoItemList에 추가 (컴포넌트 re-render됨)\r\n        .then((response) => response.json())\r\n        .then((newDaydoItem) => {\r\n            console.log(\"새 Todo 아이템 생성됨: \", newDaydoItem);\r\n            setDaydoItemList([...daydoItemList, newDaydoItem]);\r\n            \r\n            // 서버에서 다시 목록 가져오기\r\n            setFetched(false);\r\n         })\r\n    }\r\n    \r\n    // REMOVE - DELETE\r\n    function handleRemove(id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const updatedDaydoItemList = daydoItemList.filter(daydoItem => daydoItem.id !== id);\r\n        const updatedAllDaydoItemList = allDaydoItemList.filter(daydoItem => daydoItem.id !== id);\r\n\r\n        //서버\r\n        fetch(`${serverURL}/api/daydo/${id}`, {\r\n            method: 'DELETE',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            }           \r\n        })\r\n        .then((response) => response.json())\r\n        .then((deletedId) => {\r\n            console.log(\"ID:\", deletedId, \" 삭제됨\");\r\n        });\r\n\r\n        // 클라이언트\r\n        setDaydoItemList(updatedDaydoItemList);\r\n        setAllDaydoItemList(updatedAllDaydoItemList);\r\n    }\r\n  \r\n    // UPDATE (content) - PUT\r\n    function handleDaydoInputChange(e, id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const index = daydoItemList.findIndex(daydoItem => daydoItem.id === id);\r\n        const selectedItem = daydoItemList[index];\r\n        selectedItem.content = e.target.value;\r\n\r\n        // 서버\r\n        fetch(`${serverURL}/api/daydo/${id}`, {\r\n            method : 'PUT',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(selectedItem)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((updatedId) => {\r\n            console.log(\"ID:\", updatedId, \" 업데이트됨\");\r\n        });\r\n\r\n        // 클라이언트\r\n        const updatedDaydoItemList = [...daydoItemList];\r\n        updatedDaydoItemList[index] = {\r\n            ...selectedItem,\r\n        };\r\n\r\n        const allDayItemListIndex = allDaydoItemList.findIndex(daydoItem => daydoItem.id === id);\r\n        const updatedAllDaydoItemList = [...allDaydoItemList];\r\n        updatedAllDaydoItemList[allDayItemListIndex] = {\r\n            ...selectedItem,\r\n        };\r\n\r\n        setDaydoItemList(updatedDaydoItemList);\r\n        setAllDaydoItemList(updatedAllDaydoItemList);\r\n    }\r\n\r\n    function handleFormInputChange(e) {\r\n        setFormInput(e.target.value);\r\n    }\r\n\r\n    function handleKeyPress(e) {\r\n        if(e.key === 'Enter') {\r\n            handleCreate();\r\n        }\r\n    }\r\n\r\n    function handleSlider(e) {\r\n        if(e.target.className === 'right') {\r\n            if(day === 7) {\r\n                setDay(1);\r\n            }\r\n            else {\r\n                setDay(day+1);\r\n            }\r\n        }\r\n        else {\r\n            if(day === 1) {\r\n                setDay(7);\r\n            }\r\n            else {\r\n                setDay(day-1);\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"template-wrapper daydo-list-template-wrapper\">\r\n            <div className=\"daydo-title-wrapper\">\r\n                <DaydoSlider day={day} onSlide={handleSlider}></DaydoSlider>\r\n            </div>\r\n            <p></p>\r\n            <div className=\"daydo-list-wrapper\">\r\n                <DaydoItemList\r\n                    day={day}\r\n                    daydoList={daydoItemList}\r\n                    onRemove={handleRemove}\r\n                    onChange={handleDaydoInputChange}\r\n                />\r\n            </div>\r\n            <div className=\"daydo-form-wrapper\">\r\n                <DaydoForm\r\n                    value={formInput}\r\n                    onChange={handleFormInputChange}\r\n                    onCreate={handleCreate}\r\n                    onKeyPress={handleKeyPress}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DayDoListTemplate;","import './Preference.css';\r\n\r\nconst Preference = ({ darkTheme, onToggle }) => {    \r\n    return (\r\n        <div className=\"template-wrapper preference-template-wrapper\">\r\n            <div className=\"title\">\r\n                <h2>기본 설정</h2>\r\n                <p></p>\r\n            </div>\r\n            <div className=\"content\">\r\n                <ul className=\"general\">\r\n                    <li className=\"theme\">\r\n                        <span className=\"text\">다크 모드</span>\r\n                        <label className=\"switch\">\r\n                            <input type=\"checkbox\" checked={darkTheme} name=\"theme\" onChange={onToggle}></input>\r\n                            <span className=\"slider round\"></span>\r\n                        </label>\r\n                        <p style={{ color : 'gray', border : 'none', width : '100%', marginTop : '5%'}}>밤에는 다크 모드를 켜는 것을 추천드려요.</p>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preference;","import DayDoListTemplate from './daydo/DaydoListTemplate';\r\nimport Preference from './preference/Preference';\r\n\r\nfunction PreferenceWrapper({ darkTheme, handleThemeToggle }) {\r\n  return (\r\n    <div className=\"preference-wrapper\">\r\n      <div className=\"component\">\r\n        <h1 style={{ fontSize: '3rem' }}>설정</h1>\r\n        <p>요일별 할 일 설정</p>\r\n        <DayDoListTemplate darkTheme={darkTheme}></DayDoListTemplate>\r\n        <p style={{ color: \"gray\" }}>요일별로 할 일을 설정하면<br></br> 해당 요일에 자동으로 할 일이 갱신됩니다!</p>\r\n      </div>\r\n      <div className=\"component\">\r\n        <Preference darkTheme={darkTheme} onToggle={handleThemeToggle}></Preference>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PreferenceWrapper;","import './TodoForm.css';\r\n\r\nconst TodoForm = ({value, onChange, onCreate, onKeyPress}) => {\r\n    return (\r\n        <div className=\"todo-form\">\r\n            <span>+</span>           \r\n            <input type=\"text\" value={value} onChange={onChange} onKeyPress={onKeyPress} placeholder=\"할 일 적기\"/>\r\n            <button onClick={onCreate}>추가</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import './TodoItem.css';\r\n\r\nconst TodoItem = ({ id, content, isDone, onRemove, onChange, onToggle}) => {\r\n    return (\r\n        <li className=\"todo-item\">\r\n            <input id={id} type=\"checkbox\" checked={isDone} onChange={() => { onToggle(id) }}></input>\r\n            <label htmlFor={id}></label>\r\n            <input type=\"text\" className={`todo-content ${isDone ? ('checked') : ('')}`} value={content} onChange={(e) => { onChange(e, id) }}/>\r\n            <span className=\"remove-item\" onClick={(e) => { e.stopPropagation(); onRemove(id); }}>&times;</span>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default TodoItem;","import TodoItem from './TodoItem';\r\nimport './TodoItemList.css';\r\n\r\nconst TodoItemList = ({ todoList, onRemove, onChange, onToggle }) => {\r\n    let todoListHTML;\r\n\r\n    if(todoList.length === 0) {\r\n        todoListHTML = <div className=\"todo-empty-list\">새 할 일을 적어주세요!</div>\r\n    }\r\n    else {\r\n        todoListHTML = todoList.map(\r\n            ({id, content, isDone}) => {\r\n                return <TodoItem\r\n                    key={id}\r\n                    id={id}\r\n                    content={content}\r\n                    isDone={isDone}\r\n                    onRemove={onRemove}\r\n                    onChange={onChange}\r\n                    onToggle={onToggle}\r\n                />\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <ul className=\"todo-list-wrapper\">\r\n            {todoListHTML}\r\n        </ul>\r\n    );\r\n}\r\n\r\nexport default TodoItemList;","import { useEffect, useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport TodoItemList from './TodoItemList';\r\nimport './TodoListTemplate.css';\r\nimport { homepageURL, serverURL } from '../../config'\r\n\r\nconst TodoListTemplate = ({ darkTheme }) => {\r\n    const [ todoItemList, setTodoItemList ] = useState([]);\r\n    const [ formInput, setFormInput ] = useState('');\r\n    const [ fetched, setFetched ] = useState(false);\r\n\r\n    const userIdLocation = document.cookie.split('; ').find(row => row.startsWith('userId'));\r\n    const userId = userIdLocation === undefined ? window.location.replace(homepageURL) : userIdLocation.split('=')[1];\r\n    \r\n    useEffect(() => { // 다크 모드 \r\n        console.log()\r\n        const inputs = document.querySelectorAll('input');\r\n    \r\n        if(darkTheme) {  \r\n          inputs.forEach(input => input.classList.add('dark'));\r\n        }\r\n        else {\r\n          inputs.forEach(input => input.classList.remove('dark'));\r\n        }\r\n    });\r\n\r\n    // FETCH - POST\r\n    useEffect(() => {\r\n        //첫 로딩시에만 서버로부터 Todo 목록 가져오기\r\n        if(!fetched) {\r\n            fetch(`${serverURL}/api/todos`, {\r\n                method : 'POST',\r\n                headers : {\r\n                    'content-type' : 'application/json'\r\n                },\r\n                body : JSON.stringify(userId)\r\n            })\r\n            .then((response) => response.json())\r\n            .then((items) => {\r\n                console.log(\"서버로부터 Todo 목록 가져옴: \", items);\r\n                setTodoItemList(items);\r\n                setFetched(true);\r\n            });\r\n        }\r\n    }, [fetched]);\r\n\r\n    // CREATE - POST \r\n    function handleCreate() {\r\n        // Form 안의 내용을 초기화\r\n        setFormInput('');\r\n\r\n        // 서버로 보낼 객체 아이템 생성\r\n        const newTodoItem = {\r\n            userId: userId,\r\n            content: formInput,\r\n            isDone: false\r\n        };\r\n        \r\n        // POST 방식으로 서버 전송\r\n        fetch(`${serverURL}/api/todo`, {\r\n            method : 'POST',\r\n            headers: {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(newTodoItem)\r\n        }) // 서버에서 받은 응답을 객체화 후, TodoItemList에 추가 (컴포넌트 re-render됨)\r\n        .then((response) => response.json())\r\n        .then((newTodoItem) => {\r\n            console.log(\"새 Todo 아이템 생성됨: \", newTodoItem);\r\n             setTodoItemList([...todoItemList, newTodoItem]);\r\n         })\r\n    }\r\n    \r\n    // REMOVE - DELETE\r\n    function handleRemove(id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const updatedTodoItemList = todoItemList.filter(todoItem => todoItem.id !== id);\r\n\r\n        //서버\r\n        fetch(`${serverURL}/api/todo/${id}`, {\r\n            method: 'DELETE',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            }           \r\n        })\r\n        .then((response) => response.json())\r\n        .then((deletedId) => {\r\n            console.log(\"ID:\", deletedId, \" 삭제됨\");\r\n        });\r\n\r\n        //클라이언트\r\n        setTodoItemList(updatedTodoItemList);\r\n    }\r\n  \r\n    // UPDATE (content) - PUT\r\n    function handleTodoInputChange(e, id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const index = todoItemList.findIndex(todoItem => todoItem.id === id);\r\n        const selectedItem = todoItemList[index];\r\n        selectedItem.content = e.target.value;\r\n\r\n        // 서버\r\n        fetch(`${serverURL}/api/todo/${id}`, {\r\n            method : 'PUT',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(selectedItem)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((updatedId) => {\r\n            console.log(\"ID:\", updatedId, \" 업데이트됨\");\r\n        });\r\n\r\n        // 클라이언트\r\n        const updatedTodoItemList = [...todoItemList];\r\n\r\n        updatedTodoItemList[index] = {\r\n            ...selectedItem,\r\n        };\r\n\r\n        setTodoItemList(updatedTodoItemList);\r\n    }\r\n    \r\n    // UPDATE (isDone) - PUT\r\n    function handleToggle(id) {\r\n        // 서버와 클라이언트 따로따로 처리됨\r\n        const index = todoItemList.findIndex(todoItem => todoItem.id === id);\r\n        const selectedItem = todoItemList[index];\r\n        selectedItem.isDone = !selectedItem.isDone;\r\n\r\n        // 서버\r\n        fetch(`${serverURL}/api/todo/${id}`, {\r\n            method : 'PUT',\r\n            headers : {\r\n                'content-type' : 'application/json'\r\n            },\r\n            body : JSON.stringify(selectedItem)\r\n        })\r\n        .then((response) => response.json())\r\n        .then((updatedId) => {\r\n            console.log(\"ID:\", updatedId, \" 업데이트됨\");\r\n        });\r\n\r\n        // 클라이언트\r\n        const updatedTodoItemList = [...todoItemList];\r\n\r\n        updatedTodoItemList[index] = {\r\n            ...selectedItem\r\n        };\r\n\r\n        setTodoItemList(updatedTodoItemList);       \r\n    }\r\n\r\n    function handleFormInputChange(e) {\r\n        setFormInput(e.target.value);\r\n    }\r\n\r\n    function handleKeyPress(e) {\r\n        if(e.key === 'Enter') {\r\n            handleCreate();\r\n        }\r\n    }\r\n  \r\n\r\n    return (\r\n        <div className=\"template-wrapper todo-list-template-wrapper\">\r\n            <div className=\"todo-title\">\r\n                <h2>목록</h2>\r\n                <p></p>\r\n            </div>\r\n            <div className=\"todo-lists-wrapper\">\r\n                <TodoItemList\r\n                    todoList={todoItemList}\r\n                    onRemove={handleRemove}\r\n                    onChange={handleTodoInputChange}\r\n                    onToggle={handleToggle}\r\n                />\r\n            </div>\r\n            <div className=\"todo-form-wrapper\">\r\n                <TodoForm\r\n                    value={formInput}\r\n                    onChange={handleFormInputChange}\r\n                    onCreate={handleCreate}\r\n                    onKeyPress={handleKeyPress}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoListTemplate;","import TodoListTemplate from './todo/TodoListTemplate';\r\n\r\nfunction TodayWrapper({ darkTheme, todayDateHTML }) {\r\n    return (\r\n    <div className=\"component\">\r\n        <h1 style={{ fontSize : '3rem'}}>오늘 할 일은?</h1>\r\n        {todayDateHTML}\r\n        <TodoListTemplate darkTheme={darkTheme}></TodoListTemplate>\r\n        <p style={{ color : \"gray\" }}>요일별로 할 일이 자동으로 갱신됩니다!</p>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  export default TodayWrapper;","import { useEffect, useState } from 'react';\r\nimport Footer from './components/fixed/Footer';\r\nimport Navigation from './components/fixed/Navigation';\r\nimport PreferenceWrapper from './components/PreferenceWrapper';\r\nimport TodayWrapper from './components/TodayWrapper';\r\nimport './App.css';\r\nimport { HashRouter, Route, Switch } from 'react-router-dom';\r\nimport { homepageURL, serverURL } from './config'\r\n\r\nfunction App() {\r\n  const today = new Date();\r\n  const dayname = ['일','월','화','수','목','금','토','일'];       \r\n  const todayDateHTML = <p>오늘은 <br></br> {today.getMonth()+1}월 {today.getDate()}일 {dayname[today.getDay()]}요일</p>;\r\n\r\n  const [ darkTheme, setDarkTheme ] = useState(false); // 다크 모드\r\n  //const [ selectedPageNum, setSelectedPageNum ] = useState(0); // 기본값: 오늘 할 일 (0)\r\n\r\n  useEffect(() => { // 랜더링 이후 다크 모드 설정 (추후 리팩토링)\r\n    const body = document.querySelector('body');\r\n    const navigation = document.querySelector('.navigation');\r\n    const footer = document.querySelector('.footer');\r\n\r\n    if(darkTheme) {  \r\n      body.classList.add('dark');\r\n      navigation.classList.add('dark');\r\n      footer.classList.add('dark');\r\n    }\r\n    else {\r\n      body.classList.remove('dark');\r\n      navigation.classList.remove('dark');\r\n      footer.classList.remove('dark');\r\n    }\r\n  }, [ darkTheme ]);\r\n\r\n  function handleThemeToggle() {\r\n    setDarkTheme(!darkTheme);\r\n  }\r\n\r\n  const [isPatched, setIsPatched] = useState(false);\r\n  const [userInfo, setUserInfo] = useState(\"\");\r\n\r\n  const userIdLocation = document.cookie.split('; ').find(row => row.startsWith('userId'));\r\n  const userId = userIdLocation === undefined ? window.location.replace(homepageURL) : userIdLocation.split('=')[1];\r\n  \r\n  // Read\r\n  useEffect(() => {\r\n      if (!isPatched) {\r\n          // GET 방식으로 서버 전송\r\n          fetch(`${serverURL}/api/user`, {\r\n              method: 'POST',\r\n              headers: {\r\n                  'content-type': 'application/json'\r\n              },\r\n              body: JSON.stringify(userId)\r\n          })\r\n              .then((response) => response.json())\r\n              .then((newUserInfo) => {\r\n                  console.log(\"유저 정보 가져옴: \", { newUserInfo });\r\n                  setUserInfo(newUserInfo);\r\n              });\r\n\r\n          setIsPatched(true);\r\n      }\r\n  }, [isPatched]);\r\n  \r\n  // 메인\r\n  return (\r\n    <HashRouter>\r\n      <div className=\"main\">\r\n        <Navigation userInfo={userInfo}></Navigation>\r\n        <Switch>\r\n          <Route path={'/'} exact render={() => <TodayWrapper darkTheme={darkTheme} todayDateHTML={todayDateHTML}/>}/>\r\n          <Route path={'/preference'} render={() => <PreferenceWrapper darkTheme={darkTheme} handleThemeToggle={handleThemeToggle}/>}/>\r\n        </Switch>\r\n        <Footer></Footer>\r\n      </div>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}